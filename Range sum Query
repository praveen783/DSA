(efficient solution is using prefix sum time complexity(O[N+Q]) and Space complexity O[N]
#include <iostream>
using namespace std;
void solution()
{
    long long n, q;
    cin >> n >> q;
    long long arr[n];
    for (long long i = 1; i <= n; i++)
    {
        cin >> arr[i];
    }
    long long sum = 0;
    long long prefix[n];
    long long index = 1;
    for (long long i = 1; i <= n; i++)
    {
        sum += arr[i];
        prefix[index] = sum;
        index++;
    }
    long long l, r;
    for (long long i = 0; i < q; i++)
    {
        cin >> l >> r;
        if (l == 1)
        {
            cout << prefix[r] << endl;
        }
        else if (l == 1 && r == n)
        {
            cout << prefix[r] << endl;
        }
        else
        {
            cout << prefix[r] - prefix[l - 1] << endl;
        }
    }
}
int main()
{
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);
    solution();
    return 0;
}
